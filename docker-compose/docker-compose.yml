services:
  gateway-redis:
    image: redis
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      timeout: 10s
      retries: 10
    networks:
      - szopnet
  auth-server-redis:
    image: redis
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      timeout: 10s
      retries: 10
    networks:
      - szopnet
    ports:
      - "6379:6379"
  rabbitmq:
    image: rabbitmq:4.1-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_port_connectivity" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_COOKIE_VALUE}
    networks:
      - szopnet

  auth-server-db:
    extends:
      file: common-config.yml
      service: microservice-db-postgres-config
    container_name: auth-server-db
    environment:
      POSTGRES_DB: ${AUTH_SERVER_DB_NAME}

  user-service-db:
    extends:
      file: common-config.yml
      service: microservice-db-postgres-config
    container_name: user-service-db
    environment:
      POSTGRES_DB: ${USER_SERVICE_DB_NAME}

  message-service-db:
    image: mongo:latest
    container_name: message-service-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_DB_PASSWORD}
      MONGO_INITDB_DATABASE: ${MESSAGE_SERVICE_DB_NAME}
    volumes:
      - ./mongo-data:/data/db

    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - szopnet

  configserver:
    image: "szopszop/configserver"
    container_name: configserver
    healthcheck:
      test: "curl --fail --silent localhost:8060/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s
    environment:
      OTEL_SERVICE_NAME: "configserver"
    networks:
      - szopnet
    deploy:
      resources:
        limits:
          memory: 700m

  eurekaserver:
    image: "szopszop/eurekaserver"
    container_name: eurekaserver
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s
    environment:
      SPRING_CONFIG_IMPORT: configserver:http://configserver:8060/
      SPRING_APPLICATION_NAME: "eurekaserver"
      OTEL_SERVICE_NAME: "eurekaserver"
    networks:
      - szopnet
    deploy:
      resources:
        limits:
          memory: 700m

  auth-server:
    extends:
      file: common-config.yml
      service: microservice-eureka-config
    image: "szopszop/auth-server"
    container_name: auth-server
    depends_on:
      auth-server-db:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    ports:
      - "8090:8090"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8090/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: auth-server
      SPRING_DATASOURCE_URL: jdbc:postgresql://auth-server-db:5432/${AUTH_SERVER_DB_NAME}
      JWT_SECRET: ${JWT_SECRET}
      OTEL_SERVICE_NAME: auth-server
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      AUTH_SERVER_INTERNAL_SECRET: ${AUTH_SERVER_INTERNAL_SECRET}
      USER_SERVICE_CLIENT_SECRET: ${USER_SERVICE_CLIENT_SECRET}
      MESSAGE_SERVICE_CLIENT_SECRET: ${MESSAGE_SERVICE_CLIENT_SECRET}
      NOTIFICATION_SERVICE_CLIENT_SECRET: ${NOTIFICATION_SERVICE_CLIENT_SECRET}
      KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}

  user-service:
    extends:
      file: common-config.yml
      service: microservice-eureka-config
    image: "szopszop/user-service"
    container_name: user-service
    depends_on:
      user-service-db:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      auth-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: user-service
      SPRING_DATASOURCE_URL: jdbc:postgresql://user-service-db:5432/${USER_SERVICE_DB_NAME}
      OTEL_SERVICE_NAME: user-service
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_FLYWAY_CLEAN_ON_VALIDATION_ERROR: "true"
      SPRING_FLYWAY_CLEAN_DISABLED: "false"
      SPRING_FLYWAY_ENABLED: "true"
      SPRING_JPA_HIBERNATE_DDL_AUTO: "validate"

  message-service:
    extends:
      file: common-config.yml
      service: microservice-eureka-config
    image: "szopszop/message-service"
    container_name: message-service
    depends_on:
      message-service-db:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      auth-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9010/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: message-service
      MONGO_DB_URI: mongodb://${MONGO_DB_USER}:${MONGO_DB_PASSWORD}@message-service-db:27017/${MESSAGE_SERVICE_DB_NAME}?authSource=admin
      OTEL_SERVICE_NAME: message-service
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://auth-server:8090

  notification-service:
    extends:
      file: common-config.yml
      service: microservice-eureka-config
    image: "szopszop/notification-service"
    container_name: notification-service
    depends_on:
      eurekaserver:
        condition: service_healthy
      auth-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9020/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: notification-service
      OTEL_SERVICE_NAME: notification-service
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://auth-server:8090
      SPRING_CONFIG_IMPORT: optional:configserver:http://configserver:8060/

  gatewayserver:
    extends:
      file: common-config.yml
      service: microservice-eureka-config
    image: "szopszop/gatewayserver"
    container_name: gatewayserver
    depends_on:
      auth-server:
        condition: service_healthy
      user-service:
        condition: service_healthy
      message-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
      gateway-redis:
        condition: service_healthy
    ports:
      - "8050:8050"
    environment:
      SPRING_APPLICATION_NAME: gatewayserver
      SPRING_DATA_REDIS_CONNECT-TIMEOUT: 2s
      SPRING_DATA_REDIS_HOST: gateway-redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_TIMEOUT: 1s
      OTEL_SERVICE_NAME: gatewayserver



  ###############################################
# Observability

  prometheus:
    image: prom/prometheus:v3.1.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - szopnet

  grafana:
    image: grafana/grafana:11.4.0
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    ports:
      - "3000:3000"
    volumes:
      - ./observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - szopnet

  frontend:
    build:
      context: ../frontend
    container_name: frontend
    ports:
      - "4200:80"
    depends_on:
      gatewayserver:
        condition: service_healthy
      auth-server:
        condition: service_healthy
      grafana:
        condition: service_healthy
    environment:
      - API_URL=http://gatewayserver:8050
      - AUTH_SERVER_URL=http://auth-server:8090
      - GRAFANA_URL=http://grafana:3000
    networks:
      - szopnet

networks:
  szopnet:
    driver: bridge
