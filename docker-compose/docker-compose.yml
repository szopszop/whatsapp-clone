services:
  gateway-redis:
    extends:
      file: common-config.yml
      service: network-deploy-service
    image: redis
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      timeout: 10s
      retries: 10

  auth-server-db:
    extends:
      file: common-config.yml
      service: microservice-db-config
    container_name: auth-server-db
    environment:
      POSTGRES_DB: ${AUTH_SERVER_DB_NAME}

  user-service-db:
    extends:
      file: common-config.yml
      service: microservice-db-config
    container_name: user-service-db
    environment:
      POSTGRES_DB: ${USER_SERVICE_DB_NAME}

  configserver:
    extends:
      file: common-config.yml
      service: microservice-base-config
    image: "szopszop/configserver"
    container_name: configserver
    healthcheck:
      test: "curl --fail --silent localhost:8060/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s
    environment:
      OTEL_SERVICE_NAME: "configserver"
      
  eurekaserver:
    extends:
      file: common-config.yml
      service: microservice-configserver-config
    image: "szopszop/eurekaserver"
    container_name: eurekaserver
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"
      OTEL_SERVICE_NAME: "eurekaserver"

  auth-server:
    extends:
      file: common-config.yml
      service: microservice-eureka-config
    image: "szopszop/auth-server"
    container_name: auth-server
    depends_on:
      auth-server-db:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    ports:
      - "8090:8090"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8090/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: auth-server
      SPRING_DATASOURCE_URL: jdbc:postgresql://auth-server-db:5432/${AUTH_SERVER_DB_NAME}
      JWT_SECRET: ${JWT_SECRET}
      OTEL_SERVICE_NAME: auth-server



  user-service:
    extends:
      file: common-config.yml
      service: microservice-eureka-config
    image: "szopszop/user-service"
    container_name: user-service
    depends_on:
      user-service-db:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      auth-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: user-service
      SPRING_DATASOURCE_URL: jdbc:postgresql://user-service-db:5432/${USER_SERVICE_DB_NAME}
      OTEL_SERVICE_NAME: user-service

  gatewayserver:
    extends:
      file: common-config.yml
      service: microservice-eureka-config
    image: "szopszop/gatewayserver"
    container_name: gatewayserver
    depends_on:
      auth-server:
        condition: service_healthy
      user-service:
        condition: service_healthy
      gateway-redis:
        condition: service_healthy
    ports:
      - "8050:8050"
    environment:
      SPRING_APPLICATION_NAME: gatewayserver
      SPRING_DATA_REDIS_CONNECT-TIMEOUT: 2s
      SPRING_DATA_REDIS_HOST: gateway-redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_TIMEOUT: 1s
      OTEL_SERVICE_NAME: gatewayserver



  ###############################################
# Observability

  read:
    image: grafana/loki:3.1.2
    command: "-config.file=/etc/loki/config.yaml -target=read"
    volumes:
      - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      szopnet:
        aliases:
          - loki

  write:
    image: grafana/loki:3.1.2
    command: "-config.file=/etc/loki/config.yaml -target=write"
    volumes:
      - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:v1.5.1
    volumes:
      - ./observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

  minio:
    image: minio/minio:RELEASE.2024-12-18T13-15-44Z
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  prometheus:
    image: prom/prometheus:v3.1.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  tempo:
    image: grafana/tempo:2.6.1
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    volumes:
      - ./observability/tempo/tempo.yml:/etc/tempo-config.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  grafana:
    image: grafana/grafana:11.4.0
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ./observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  backend:
    image: grafana/loki:3.1.2
    volumes:
      - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

  gateway:
    image: nginx:1.27.3
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service


networks:
  szopnet:
    driver: bridge
