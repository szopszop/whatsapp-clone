server:
  port: 8090

spring:
  application:
    name: auth-server
  config:
    activate:
      on-profile: dev
  datasource:
    url: jdbc:postgresql://localhost:5430/${AUTH_SERVER_DB_NAME}
    username: ${POSTGRES_USERNAME}
    password: ${POSTGRES_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
    properties:
      hibernate:
        format_sql: true
  security:
    user:
      name: user
      password: password
    oauth2:
      authorizationserver:
        client:
          oidc-client:
            registration:
              client-id: "oidc-client"
              client-secret: "{noop}secret"
              client-authentication-methods:
                - "client_secret_basic"
              authorization-grant-types:
                - "authorization_code"
                - "refresh_token"
              redirect-uris:
                - "http://127.0.0.1:8080/login/oauth2/code/oidc-client"
              post-logout-redirect-uris:
                - "http://127.0.0.1:8080/"
              scopes:
                - "openid"
                - "profile"
            require-authorization-consent: true


eureka:
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/


#Eureka dashboard
info:
  app:
    name: "auth-server"
    description: "Auth server app"
    version: "1.0.0"

#Actuator
management:
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      probes:
        enabled: true
    metrics:
      access: read_only
    prometheus:
      access: read_only
  info:
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}


logging:
  level:
    tracz:
      authserver: debug
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"
