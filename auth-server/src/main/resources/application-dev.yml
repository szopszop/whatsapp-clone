server:
  port: 8090

spring:
  application:
    name: auth-server
  config:
    activate:
      on-profile: dev
    import: "optional:configserver:http://configserver:8060/"
  datasource:
    url: jdbc:postgresql://localhost:5430/${AUTH_SERVER_DB_NAME}
    username: ${POSTGRES_USERNAME}
    password: ${POSTGRES_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: true
    properties:
      hibernate:
        format_sql: true
  security:
    oauth2:
      authorizationserver:
        client:
          auth-server-internal:
            client-secret: ${AUTH_SERVER_INTERNAL_SECRET}
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8090/


resilience4j.circuitbreaker:
  instances:
    userServiceProvision:
      registerHealthIndicator: true
      slidingWindowType: COUNT_BASED
      slidingWindowSize: 10
      failureRateThreshold: 50
      waitDurationInOpenState: 5000
      permittedNumberOfCallsInHalfOpenState: 3
      automaticTransitionFromOpenToHalfOpenEnabled: true


eureka:
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/



#Eureka dashboard
info:
  app:
    name: "auth-server"
    description: "Auth server app"
    version: "1.0.0"
  cors:
    allowed-origins: "http://localhost:3000,http://localhost:4200,https://oauth.pstmn.io"
#Actuator
management:
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      probes:
        enabled: true
    metrics:
      access: read_only
    prometheus:
      access: read_only
  info:
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}


logging:
  level:
    root: INFO
    tracz:
      authserver: DEBUG
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"
