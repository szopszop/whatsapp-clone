name: Build and Deploy to GCP

on:
  push:
    branches:
      - '*'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  POSTGRES_USERNAME: ${{ secrets.POSTGRES_USERNAME }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  ISSUER_URI: ${{ secrets.ISSUER_URI }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  AUTH_SERVER_DB_NAME: ${{ secrets.AUTH_SERVER_DB_NAME }}
  USER_SERVICE_DB_NAME: ${{ secrets.USER_SERVICE_DB_NAME }}
  MESSAGE_SERVICE_DB_NAME: ${{ secrets.MESSAGE_SERVICE_DB_NAME }}
  MONGO_DB_USER: ${{ secrets.MONGO_DB_USER }}
  MONGO_DB_PASSWORD: ${{ secrets.MONGO_DB_PASSWORD }}
  RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
  RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Configure Docker to use gcloud credentials
      run: |
        gcloud auth configure-docker

    - name: Get GKE credentials
      uses: google-github-actions/get-gke-credentials@v1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    # Build and push Java microservices using Jib
    - name: Build and push auth-server
      run: |
        cd auth-server
        mvn compile jib:build -Djib.to.image=gcr.io/${{ env.PROJECT_ID }}/auth-server:${{ github.sha }} -Djib.to.auth.username=_json_key -Djib.to.auth.password='${{ secrets.GCP_SA_KEY }}' -Dspring.profiles.active=prod

    - name: Build and push configserver
      run: |
        cd configserver
        mvn compile jib:build -Djib.to.image=gcr.io/${{ env.PROJECT_ID }}/configserver:${{ github.sha }} -Djib.to.auth.username=_json_key -Djib.to.auth.password='${{ secrets.GCP_SA_KEY }}' -Dspring.profiles.active=prod

    - name: Build and push eurekaserver
      run: |
        cd eurekaserver
        mvn compile jib:build -Djib.to.image=gcr.io/${{ env.PROJECT_ID }}/eurekaserver:${{ github.sha }} -Djib.to.auth.username=_json_key -Djib.to.auth.password='${{ secrets.GCP_SA_KEY }}' -Dspring.profiles.active=prod

    - name: Build and push user-service
      run: |
        cd user-service
        mvn compile jib:build -Djib.to.image=gcr.io/${{ env.PROJECT_ID }}/user-service:${{ github.sha }} -Djib.to.auth.username=_json_key -Djib.to.auth.password='${{ secrets.GCP_SA_KEY }}' -Dspring.profiles.active=prod

    - name: Build and push message-service
      run: |
        cd message-service
        mvn compile jib:build -Djib.to.image=gcr.io/${{ env.PROJECT_ID }}/message-service:${{ github.sha }} -Djib.to.auth.username=_json_key -Djib.to.auth.password='${{ secrets.GCP_SA_KEY }}' -Dspring.profiles.active=prod

    - name: Build and push notification-service
      run: |
        cd notification-service
        mvn compile jib:build -Djib.to.image=gcr.io/${{ env.PROJECT_ID }}/notification-service:${{ github.sha }} -Djib.to.auth.username=_json_key -Djib.to.auth.password='${{ secrets.GCP_SA_KEY }}' -Dspring.profiles.active=prod

    - name: Build and push gatewayserver
      run: |
        cd gatewayserver
        mvn compile jib:build -Djib.to.image=gcr.io/${{ env.PROJECT_ID }}/gatewayserver:${{ github.sha }} -Djib.to.auth.username=_json_key -Djib.to.auth.password='${{ secrets.GCP_SA_KEY }}' -Dspring.profiles.active=prod

    # Build and push frontend
    - name: Build and push frontend
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: gcr.io/${{ env.PROJECT_ID }}/frontend:${{ github.sha }}

    # Update Kubernetes manifests and apply
    - name: Update Kubernetes manifests
      run: |
        # Replace placeholders in Kubernetes manifests
        find k8s -type f -name "*.yaml" -exec sed -i "s|\${PROJECT_ID}|${{ env.PROJECT_ID }}|g" {} \;
        find k8s -type f -name "*.yaml" -exec sed -i "s|\${TAG}|${{ github.sha }}|g" {} \;

        # Replace placeholders in secrets.yaml with actual values from GitHub secrets
        sed -i "s|\${POSTGRES_USERNAME}|${{ secrets.POSTGRES_USERNAME }}|g" k8s/secrets.yaml
        sed -i "s|\${POSTGRES_PASSWORD}|${{ secrets.POSTGRES_PASSWORD }}|g" k8s/secrets.yaml
        sed -i "s|\${AUTH_SERVER_DB_NAME}|${{ secrets.AUTH_SERVER_DB_NAME }}|g" k8s/secrets.yaml
        sed -i "s|\${USER_SERVICE_DB_NAME}|${{ secrets.USER_SERVICE_DB_NAME }}|g" k8s/secrets.yaml
        sed -i "s|\${MESSAGE_SERVICE_DB_NAME}|${{ secrets.MESSAGE_SERVICE_DB_NAME }}|g" k8s/secrets.yaml
        sed -i "s|\${MONGO_DB_USER}|${{ secrets.MONGO_DB_USER }}|g" k8s/secrets.yaml
        sed -i "s|\${MONGO_DB_PASSWORD}|${{ secrets.MONGO_DB_PASSWORD }}|g" k8s/secrets.yaml
        sed -i "s|\${RABBITMQ_USER}|${{ secrets.RABBITMQ_USER }}|g" k8s/secrets.yaml
        sed -i "s|\${RABBITMQ_PASSWORD}|${{ secrets.RABBITMQ_PASSWORD }}|g" k8s/secrets.yaml
        sed -i "s|\${JWT_SECRET}|${{ secrets.JWT_SECRET }}|g" k8s/secrets.yaml
        sed -i "s|\${ISSUER_URI}|${{ secrets.ISSUER_URI }}|g" k8s/secrets.yaml

        # Apply the manifests to the cluster in the correct order
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/configserver.yaml
        kubectl wait --for=condition=available --timeout=300s deployment/configserver

        kubectl apply -f k8s/eurekaserver.yaml
        kubectl wait --for=condition=available --timeout=300s deployment/eurekaserver

        kubectl apply -f k8s/rabbitmq.yaml
        kubectl wait --for=condition=available --timeout=300s deployment/rabbitmq

        kubectl apply -f k8s/auth-server.yaml
        kubectl wait --for=condition=available --timeout=300s deployment/auth-server

        kubectl apply -f k8s/user-service.yaml
        kubectl wait --for=condition=available --timeout=300s deployment/user-service

        kubectl apply -f k8s/message-service.yaml
        kubectl wait --for=condition=available --timeout=300s deployment/message-service

        kubectl apply -f k8s/notification-service.yaml
        kubectl wait --for=condition=available --timeout=300s deployment/notification-service

        kubectl apply -f k8s/gatewayserver.yaml
        kubectl wait --for=condition=available --timeout=300s deployment/gatewayserver

        kubectl apply -f k8s/frontend.yaml
        kubectl wait --for=condition=available --timeout=300s deployment/frontend

        # Get the external IP of the frontend, gatewayserver, and auth-server services
        echo "Frontend is available at: $(kubectl get service frontend -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
        echo "API Gateway is available at: $(kubectl get service gatewayserver -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
        echo "Auth Server is available at: $(kubectl get service auth-server -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
